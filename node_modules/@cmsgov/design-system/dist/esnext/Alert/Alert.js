function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import { EVENT_CATEGORY, MAX_LENGTH, sendAnalyticsEvent } from '../analytics/SendAnalytics';
import PropTypes from 'prop-types';
import React from 'react';
import classNames from 'classnames';
import get from 'lodash/get';
import uniqueId from 'lodash.uniqueid'; // Default analytics object

var defaultAnalytics = function defaultAnalytics() {
  var heading = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var variation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return {
    onComponentDidMount: {
      event_name: 'alert_impression',
      event_type: EVENT_CATEGORY.uiInteraction,
      ga_eventAction: 'alert impression',
      ga_eventCategory: EVENT_CATEGORY.uiComponents,
      ga_eventLabel: heading,
      heading: heading,
      type: variation
    }
  };
};

export var Alert = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(Alert, _React$PureComponent);

  var _super = _createSuper(Alert);

  function Alert(props) {
    var _this;

    _classCallCheck(this, Alert);

    _this = _super.call(this, props);
    _this.alertRef = null;
    _this.headingId = props.headingId || uniqueId('alert_');
    _this.eventHeadingText = '';

    if (process.env.NODE_ENV !== 'production') {
      if (!props.heading && !props.children) {
        console.warn("Empty <Alert> components are not allowed, please use the 'heading' prop or include children.");
      }
    }

    return _this;
  }

  _createClass(Alert, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var eventAction = 'onComponentDidMount';
      var eventHeading = this.props.heading || this.props.children;
      /* Send analytics event for `error`, `warn`, `success` alert variations */

      if (this.props.variation) {
        if (typeof eventHeading === 'string') {
          this.eventHeadingText = eventHeading.substring(0, MAX_LENGTH);
        } else {
          var eventHeadingTextElement = this.alertRef && this.alertRef.getElementsByClassName('ds-c-alert__heading')[0] || this.alertRef && this.alertRef.getElementsByClassName('ds-c-alert__body')[0];
          this.eventHeadingText = eventHeadingTextElement && eventHeadingTextElement.textContent ? eventHeadingTextElement.textContent.substring(0, MAX_LENGTH) : '';
        }

        sendAnalyticsEvent(get(this.props.analytics, eventAction), get(defaultAnalytics(this.eventHeadingText, this.props.variation), eventAction));
      }
    }
  }, {
    key: "heading",
    value: function heading() {
      var Heading = "h".concat(this.props.headingLevel) || "h2";

      if (this.props.heading) {
        return /*#__PURE__*/React.createElement(Heading, {
          className: "ds-c-alert__heading",
          id: this.headingId
        }, this.props.heading);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var classes = classNames('ds-c-alert', this.props.hideIcon && 'ds-c-alert--hide-icon', this.props.variation && "ds-c-alert--".concat(this.props.variation), this.props.className);
      return /*#__PURE__*/React.createElement("div", {
        className: classes,
        role: this.props.role,
        "aria-labelledby": this.props.heading ? this.headingId : undefined,
        ref: function ref(_ref) {
          return _this2.alertRef = _ref;
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: "ds-c-alert__body"
      }, this.heading(), this.props.children));
    }
  }]);

  return Alert;
}(React.PureComponent);
Alert.defaultProps = {
  role: 'region',
  headingLevel: '2'
};
/**
 * Defines the shape of an analytics event for tracking that is an object with key-value pairs
 */

var AnalyticsEventShape = PropTypes.shape({
  event_name: PropTypes.string,
  event_type: PropTypes.string,
  ga_eventAction: PropTypes.string,
  ga_eventCategory: PropTypes.string,
  ga_eventLabel: PropTypes.string,
  ga_eventType: PropTypes.string,
  ga_eventValue: PropTypes.string,
  heading: PropTypes.string,
  type: PropTypes.string
});
Alert.propTypes = {
  /**
   * Analytics events tracking is enabled by default.
   * The `analytics` prop is an object of events that is either a nested `objects` with key-value
   * pairs, or `boolean` for disabling the event tracking. To disable an event tracking, set the
   * event object value to `false`.
   * When an event is triggered, the object value is populated and sent to google analytics
   * if `window.utag` instance is loaded.
   */
  analytics: PropTypes.shape({
    onComponentDidMount: PropTypes.oneOfType([PropTypes.bool, AnalyticsEventShape])
  }),

  /**
   * The alert's body content
   */
  children: PropTypes.node,
  className: PropTypes.string,

  /**
   * Text for the alert heading
   */
  heading: PropTypes.string,

  /**
   * Optional id used to link the `aria-labelledby` attribute to the heading. If not provided, a unique id will be automatically generated and used.
   */
  headingId: PropTypes.string,

  /**
   * Heading type to override default `<h3>`.
   */
  headingLevel: PropTypes.oneOf(['1', '2', '3', '4', '5', '6']),

  /**
   * Boolean to hide the `Alert` icon
   */
  hideIcon: PropTypes.bool,

  /**
   * ARIA `role`, defaults to 'region'
   */
  role: PropTypes.oneOf(['alert', 'alertdialog', 'region', 'status']),

  /**
   * A string corresponding to the `Alert` variation classes (`error`, `warn`, `success`)
   */
  variation: PropTypes.oneOf(['error', 'warn', 'success'])
};
export default Alert;